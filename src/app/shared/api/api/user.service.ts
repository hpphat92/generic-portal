/**
 * Generic Porta;
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { CustomObjectResultListUserDTO } from '../model/customObjectResultListUserDTO';
import { SignupModel } from '../model/signupModel';
import { SingleResultUser } from '../model/singleResultUser';
import { SingleResultUserDTO } from '../model/singleResultUserDTO';
import { User } from '../model/user';
import { UserDTO } from '../model/userDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class UserService {

    protected basePath = 'https://genericportalbackend.azurewebsites.net';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param id 
     * @param ZUMO_API_VERSION 
     * @param X_ZUMO_AUTH 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userGet(id: string, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe?: 'body', reportProgress?: boolean): Observable<SingleResultUser>;
    public userGet(id: string, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SingleResultUser>>;
    public userGet(id: string, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SingleResultUser>>;
    public userGet(id: string, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling userGet.');
        }
        if (ZUMO_API_VERSION === null || ZUMO_API_VERSION === undefined) {
            throw new Error('Required parameter ZUMO_API_VERSION was null or undefined when calling userGet.');
        }
        if (X_ZUMO_AUTH === null || X_ZUMO_AUTH === undefined) {
            throw new Error('Required parameter X_ZUMO_AUTH was null or undefined when calling userGet.');
        }

        let headers = this.defaultHeaders;
        if (ZUMO_API_VERSION !== undefined && ZUMO_API_VERSION !== null) {
            headers = headers.set('ZUMO-API-VERSION', String(ZUMO_API_VERSION));
        }
        if (X_ZUMO_AUTH !== undefined && X_ZUMO_AUTH !== null) {
            headers = headers.set('X-ZUMO-AUTH', String(X_ZUMO_AUTH));
        }

        // authentication (facebook) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<SingleResultUser>(`${this.basePath}/api/user/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param ZUMO_API_VERSION 
     * @param X_ZUMO_AUTH 
     * @param searchTerm 
     * @param top 
     * @param lon 
     * @param lat 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userGetAllUsers(ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, searchTerm?: string, top?: number, lon?: number, lat?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<User>>;
    public userGetAllUsers(ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, searchTerm?: string, top?: number, lon?: number, lat?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<User>>>;
    public userGetAllUsers(ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, searchTerm?: string, top?: number, lon?: number, lat?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<User>>>;
    public userGetAllUsers(ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, searchTerm?: string, top?: number, lon?: number, lat?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (ZUMO_API_VERSION === null || ZUMO_API_VERSION === undefined) {
            throw new Error('Required parameter ZUMO_API_VERSION was null or undefined when calling userGetAllUsers.');
        }
        if (X_ZUMO_AUTH === null || X_ZUMO_AUTH === undefined) {
            throw new Error('Required parameter X_ZUMO_AUTH was null or undefined when calling userGetAllUsers.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (searchTerm !== undefined) {
            queryParameters = queryParameters.set('searchTerm', <any>searchTerm);
        }
        if (top !== undefined) {
            queryParameters = queryParameters.set('top', <any>top);
        }
        if (lon !== undefined) {
            queryParameters = queryParameters.set('lon', <any>lon);
        }
        if (lat !== undefined) {
            queryParameters = queryParameters.set('lat', <any>lat);
        }

        let headers = this.defaultHeaders;
        if (ZUMO_API_VERSION !== undefined && ZUMO_API_VERSION !== null) {
            headers = headers.set('ZUMO-API-VERSION', String(ZUMO_API_VERSION));
        }
        if (X_ZUMO_AUTH !== undefined && X_ZUMO_AUTH !== null) {
            headers = headers.set('X-ZUMO-AUTH', String(X_ZUMO_AUTH));
        }

        // authentication (facebook) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<User>>(`${this.basePath}/api/User`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param ZUMO_API_VERSION 
     * @param X_ZUMO_AUTH 
     * @param searchTerm 
     * @param top 
     * @param lon 
     * @param lat 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userGetAllUsers_1(ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, searchTerm?: string, top?: number, lon?: number, lat?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<User>>;
    public userGetAllUsers_1(ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, searchTerm?: string, top?: number, lon?: number, lat?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<User>>>;
    public userGetAllUsers_1(ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, searchTerm?: string, top?: number, lon?: number, lat?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<User>>>;
    public userGetAllUsers_1(ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, searchTerm?: string, top?: number, lon?: number, lat?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (ZUMO_API_VERSION === null || ZUMO_API_VERSION === undefined) {
            throw new Error('Required parameter ZUMO_API_VERSION was null or undefined when calling userGetAllUsers_1.');
        }
        if (X_ZUMO_AUTH === null || X_ZUMO_AUTH === undefined) {
            throw new Error('Required parameter X_ZUMO_AUTH was null or undefined when calling userGetAllUsers_1.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (searchTerm !== undefined) {
            queryParameters = queryParameters.set('searchTerm', <any>searchTerm);
        }
        if (top !== undefined) {
            queryParameters = queryParameters.set('top', <any>top);
        }
        if (lon !== undefined) {
            queryParameters = queryParameters.set('lon', <any>lon);
        }
        if (lat !== undefined) {
            queryParameters = queryParameters.set('lat', <any>lat);
        }

        let headers = this.defaultHeaders;
        if (ZUMO_API_VERSION !== undefined && ZUMO_API_VERSION !== null) {
            headers = headers.set('ZUMO-API-VERSION', String(ZUMO_API_VERSION));
        }
        if (X_ZUMO_AUTH !== undefined && X_ZUMO_AUTH !== null) {
            headers = headers.set('X-ZUMO-AUTH', String(X_ZUMO_AUTH));
        }

        // authentication (facebook) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<User>>(`${this.basePath}/tables/User`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param ZUMO_API_VERSION 
     * @param X_ZUMO_AUTH 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userGetUser(id: string, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe?: 'body', reportProgress?: boolean): Observable<SingleResultUser>;
    public userGetUser(id: string, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SingleResultUser>>;
    public userGetUser(id: string, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SingleResultUser>>;
    public userGetUser(id: string, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling userGetUser.');
        }
        if (ZUMO_API_VERSION === null || ZUMO_API_VERSION === undefined) {
            throw new Error('Required parameter ZUMO_API_VERSION was null or undefined when calling userGetUser.');
        }
        if (X_ZUMO_AUTH === null || X_ZUMO_AUTH === undefined) {
            throw new Error('Required parameter X_ZUMO_AUTH was null or undefined when calling userGetUser.');
        }

        let headers = this.defaultHeaders;
        if (ZUMO_API_VERSION !== undefined && ZUMO_API_VERSION !== null) {
            headers = headers.set('ZUMO-API-VERSION', String(ZUMO_API_VERSION));
        }
        if (X_ZUMO_AUTH !== undefined && X_ZUMO_AUTH !== null) {
            headers = headers.set('X-ZUMO-AUTH', String(X_ZUMO_AUTH));
        }

        // authentication (facebook) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<SingleResultUser>(`${this.basePath}/tables/User/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param ZUMO_API_VERSION 
     * @param X_ZUMO_AUTH 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userLogin(ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe?: 'body', reportProgress?: boolean): Observable<SingleResultUser>;
    public userLogin(ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SingleResultUser>>;
    public userLogin(ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SingleResultUser>>;
    public userLogin(ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (ZUMO_API_VERSION === null || ZUMO_API_VERSION === undefined) {
            throw new Error('Required parameter ZUMO_API_VERSION was null or undefined when calling userLogin.');
        }
        if (X_ZUMO_AUTH === null || X_ZUMO_AUTH === undefined) {
            throw new Error('Required parameter X_ZUMO_AUTH was null or undefined when calling userLogin.');
        }

        let headers = this.defaultHeaders;
        if (ZUMO_API_VERSION !== undefined && ZUMO_API_VERSION !== null) {
            headers = headers.set('ZUMO-API-VERSION', String(ZUMO_API_VERSION));
        }
        if (X_ZUMO_AUTH !== undefined && X_ZUMO_AUTH !== null) {
            headers = headers.set('X-ZUMO-AUTH', String(X_ZUMO_AUTH));
        }

        // authentication (facebook) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<SingleResultUser>(`${this.basePath}/api/user/login`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param user 
     * @param ZUMO_API_VERSION 
     * @param X_ZUMO_AUTH 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userPatchUser(id: string, user: any, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public userPatchUser(id: string, user: any, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public userPatchUser(id: string, user: any, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public userPatchUser(id: string, user: any, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling userPatchUser.');
        }
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling userPatchUser.');
        }
        if (ZUMO_API_VERSION === null || ZUMO_API_VERSION === undefined) {
            throw new Error('Required parameter ZUMO_API_VERSION was null or undefined when calling userPatchUser.');
        }
        if (X_ZUMO_AUTH === null || X_ZUMO_AUTH === undefined) {
            throw new Error('Required parameter X_ZUMO_AUTH was null or undefined when calling userPatchUser.');
        }

        let headers = this.defaultHeaders;
        if (ZUMO_API_VERSION !== undefined && ZUMO_API_VERSION !== null) {
            headers = headers.set('ZUMO-API-VERSION', String(ZUMO_API_VERSION));
        }
        if (X_ZUMO_AUTH !== undefined && X_ZUMO_AUTH !== null) {
            headers = headers.set('X-ZUMO-AUTH', String(X_ZUMO_AUTH));
        }

        // authentication (facebook) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.patch<User>(`${this.basePath}/api/User/${encodeURIComponent(String(id))}`,
            user,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param user 
     * @param ZUMO_API_VERSION 
     * @param X_ZUMO_AUTH 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userPatchUser_2(id: string, user: any, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public userPatchUser_2(id: string, user: any, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public userPatchUser_2(id: string, user: any, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public userPatchUser_2(id: string, user: any, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling userPatchUser_2.');
        }
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling userPatchUser_2.');
        }
        if (ZUMO_API_VERSION === null || ZUMO_API_VERSION === undefined) {
            throw new Error('Required parameter ZUMO_API_VERSION was null or undefined when calling userPatchUser_2.');
        }
        if (X_ZUMO_AUTH === null || X_ZUMO_AUTH === undefined) {
            throw new Error('Required parameter X_ZUMO_AUTH was null or undefined when calling userPatchUser_2.');
        }

        let headers = this.defaultHeaders;
        if (ZUMO_API_VERSION !== undefined && ZUMO_API_VERSION !== null) {
            headers = headers.set('ZUMO-API-VERSION', String(ZUMO_API_VERSION));
        }
        if (X_ZUMO_AUTH !== undefined && X_ZUMO_AUTH !== null) {
            headers = headers.set('X-ZUMO-AUTH', String(X_ZUMO_AUTH));
        }

        // authentication (facebook) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.patch<User>(`${this.basePath}/tables/User/${encodeURIComponent(String(id))}`,
            user,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param model 
     * @param ZUMO_API_VERSION 
     * @param X_ZUMO_AUTH 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userPostItem(model: SignupModel, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe?: 'body', reportProgress?: boolean): Observable<SingleResultUserDTO>;
    public userPostItem(model: SignupModel, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SingleResultUserDTO>>;
    public userPostItem(model: SignupModel, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SingleResultUserDTO>>;
    public userPostItem(model: SignupModel, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling userPostItem.');
        }
        if (ZUMO_API_VERSION === null || ZUMO_API_VERSION === undefined) {
            throw new Error('Required parameter ZUMO_API_VERSION was null or undefined when calling userPostItem.');
        }
        if (X_ZUMO_AUTH === null || X_ZUMO_AUTH === undefined) {
            throw new Error('Required parameter X_ZUMO_AUTH was null or undefined when calling userPostItem.');
        }

        let headers = this.defaultHeaders;
        if (ZUMO_API_VERSION !== undefined && ZUMO_API_VERSION !== null) {
            headers = headers.set('ZUMO-API-VERSION', String(ZUMO_API_VERSION));
        }
        if (X_ZUMO_AUTH !== undefined && X_ZUMO_AUTH !== null) {
            headers = headers.set('X-ZUMO-AUTH', String(X_ZUMO_AUTH));
        }

        // authentication (facebook) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<SingleResultUserDTO>(`${this.basePath}/api/user/signup`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param user 
     * @param ZUMO_API_VERSION 
     * @param X_ZUMO_AUTH 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userReplaceUser(id: string, user: UserDTO, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public userReplaceUser(id: string, user: UserDTO, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public userReplaceUser(id: string, user: UserDTO, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public userReplaceUser(id: string, user: UserDTO, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling userReplaceUser.');
        }
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling userReplaceUser.');
        }
        if (ZUMO_API_VERSION === null || ZUMO_API_VERSION === undefined) {
            throw new Error('Required parameter ZUMO_API_VERSION was null or undefined when calling userReplaceUser.');
        }
        if (X_ZUMO_AUTH === null || X_ZUMO_AUTH === undefined) {
            throw new Error('Required parameter X_ZUMO_AUTH was null or undefined when calling userReplaceUser.');
        }

        let headers = this.defaultHeaders;
        if (ZUMO_API_VERSION !== undefined && ZUMO_API_VERSION !== null) {
            headers = headers.set('ZUMO-API-VERSION', String(ZUMO_API_VERSION));
        }
        if (X_ZUMO_AUTH !== undefined && X_ZUMO_AUTH !== null) {
            headers = headers.set('X-ZUMO-AUTH', String(X_ZUMO_AUTH));
        }

        // authentication (facebook) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<User>(`${this.basePath}/api/user/${encodeURIComponent(String(id))}`,
            user,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param ZUMO_API_VERSION 
     * @param X_ZUMO_AUTH 
     * @param searchTerm 
     * @param longitude 
     * @param latitude 
     * @param top 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userSearch(ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, searchTerm?: string, longitude?: number, latitude?: number, top?: number, observe?: 'body', reportProgress?: boolean): Observable<CustomObjectResultListUserDTO>;
    public userSearch(ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, searchTerm?: string, longitude?: number, latitude?: number, top?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CustomObjectResultListUserDTO>>;
    public userSearch(ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, searchTerm?: string, longitude?: number, latitude?: number, top?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CustomObjectResultListUserDTO>>;
    public userSearch(ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, searchTerm?: string, longitude?: number, latitude?: number, top?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (ZUMO_API_VERSION === null || ZUMO_API_VERSION === undefined) {
            throw new Error('Required parameter ZUMO_API_VERSION was null or undefined when calling userSearch.');
        }
        if (X_ZUMO_AUTH === null || X_ZUMO_AUTH === undefined) {
            throw new Error('Required parameter X_ZUMO_AUTH was null or undefined when calling userSearch.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (searchTerm !== undefined) {
            queryParameters = queryParameters.set('searchTerm', <any>searchTerm);
        }
        if (longitude !== undefined) {
            queryParameters = queryParameters.set('longitude', <any>longitude);
        }
        if (latitude !== undefined) {
            queryParameters = queryParameters.set('latitude', <any>latitude);
        }
        if (top !== undefined) {
            queryParameters = queryParameters.set('top', <any>top);
        }

        let headers = this.defaultHeaders;
        if (ZUMO_API_VERSION !== undefined && ZUMO_API_VERSION !== null) {
            headers = headers.set('ZUMO-API-VERSION', String(ZUMO_API_VERSION));
        }
        if (X_ZUMO_AUTH !== undefined && X_ZUMO_AUTH !== null) {
            headers = headers.set('X-ZUMO-AUTH', String(X_ZUMO_AUTH));
        }

        // authentication (facebook) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<CustomObjectResultListUserDTO>(`${this.basePath}/api/user/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param userId 
     * @param ZUMO_API_VERSION 
     * @param X_ZUMO_AUTH 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userSendAkuku(userId: string, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public userSendAkuku(userId: string, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public userSendAkuku(userId: string, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public userSendAkuku(userId: string, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling userSendAkuku.');
        }
        if (ZUMO_API_VERSION === null || ZUMO_API_VERSION === undefined) {
            throw new Error('Required parameter ZUMO_API_VERSION was null or undefined when calling userSendAkuku.');
        }
        if (X_ZUMO_AUTH === null || X_ZUMO_AUTH === undefined) {
            throw new Error('Required parameter X_ZUMO_AUTH was null or undefined when calling userSendAkuku.');
        }

        let headers = this.defaultHeaders;
        if (ZUMO_API_VERSION !== undefined && ZUMO_API_VERSION !== null) {
            headers = headers.set('ZUMO-API-VERSION', String(ZUMO_API_VERSION));
        }
        if (X_ZUMO_AUTH !== undefined && X_ZUMO_AUTH !== null) {
            headers = headers.set('X-ZUMO-AUTH', String(X_ZUMO_AUTH));
        }

        // authentication (facebook) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/api/user/${encodeURIComponent(String(userId))}/akuku`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param messageParams 
     * @param ZUMO_API_VERSION 
     * @param X_ZUMO_AUTH 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userSendPushNotification(id: string, messageParams: any, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public userSendPushNotification(id: string, messageParams: any, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public userSendPushNotification(id: string, messageParams: any, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public userSendPushNotification(id: string, messageParams: any, ZUMO_API_VERSION: string, X_ZUMO_AUTH: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling userSendPushNotification.');
        }
        if (messageParams === null || messageParams === undefined) {
            throw new Error('Required parameter messageParams was null or undefined when calling userSendPushNotification.');
        }
        if (ZUMO_API_VERSION === null || ZUMO_API_VERSION === undefined) {
            throw new Error('Required parameter ZUMO_API_VERSION was null or undefined when calling userSendPushNotification.');
        }
        if (X_ZUMO_AUTH === null || X_ZUMO_AUTH === undefined) {
            throw new Error('Required parameter X_ZUMO_AUTH was null or undefined when calling userSendPushNotification.');
        }

        let headers = this.defaultHeaders;
        if (ZUMO_API_VERSION !== undefined && ZUMO_API_VERSION !== null) {
            headers = headers.set('ZUMO-API-VERSION', String(ZUMO_API_VERSION));
        }
        if (X_ZUMO_AUTH !== undefined && X_ZUMO_AUTH !== null) {
            headers = headers.set('X-ZUMO-AUTH', String(X_ZUMO_AUTH));
        }

        // authentication (facebook) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/x-www-form-urlencoded'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/user/${encodeURIComponent(String(id))}/notification`,
            messageParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
